import java.util.Stack;

public class Solution {  
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        int result = 0;
        int currentNumber = 0;
        int sign = 1;  // 1 means positive, -1 means negative
        
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            
            if (Character.isDigit(c)) {
                // Build the current number
                currentNumber = currentNumber * 10 + (c - '0');
            }
            
            // If the character is an operator or we reached the end of the string
            if (c == '+' || c == '-' || i == s.length() - 1 || c == '(' || c == ')') {
                // Update the result with the previous number and its sign
                if (c == '+' || c == '-') {
                    result += sign * currentNumber;
                    currentNumber = 0;
                }
                
                // Handle the current operator
                if (c == '+') {
                    sign = 1;
                } else if (c == '-') {
                    sign = -1;
                } else if (c == '(') {
                    // Push the current result and sign to the stack
                    stack.push(result);
                    stack.push(sign);
                    result = 0;  // Reset result for the new subexpression
                    sign = 1;  // Reset sign for the new subexpression
                } else if (c == ')') {
                    // Calculate the result inside the parentheses
                    result += sign * currentNumber;
                    currentNumber = 0;
                    result *= stack.pop();  // Multiply by the previous sign
                    result += stack.pop();  // Add the previous result
                }
            }
        }
        
        // Add the last number to the result (if any)
        result += sign * currentNumber;
        
        return result;
    }

    public static void main(String[] args) {
        Solution calculator = new Solution();
        
        // Example test cases
        System.out.println(calculator.calculate("1 + 1"));  // Output: 2
        System.out.println(calculator.calculate(" 2-1 + 2 "));  // Output: 3
        System.out.println(calculator.calculate("(1+(4+5+2)-3)+(6+8)"));  // Output: 23
    }
}
